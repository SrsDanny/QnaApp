swagger: '2.0'
info:
  version: 1.0.0
  title: Mobsoft lab Q&N application
basePath: /api
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml

paths:
  /question:
    post:
      tags:
        - question
      summary: Create a new question
      operationId: createQuestion
      parameters:
        - name: body
          in: body
          description: Question object to create
          required: true
          schema:
            $ref: "#/definitions/Question"
      responses:
        201:
          description: Question created. Returned ID of new question.
          schema:
            type: integer
            format: int64
        400:
          description: Question could not be created.
    get:
      tags:
        - question
      summary: Get all the questions
      operationId: getQuestions
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Question"
  /question/{questionId}:
    get:
      tags:
        - question
      summary: Get a question by ID
      operationId: getQuestionById
      parameters:
        - name: questionId
          in: path
          description: ID of the question to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Question"
        404:
          description: question not found
  /answer:
    post:
      tags:
        - answer
      summary: Create answer
      operationId: createAnswer
      parameters:
        - name: body
          in: body
          description: Answer object to create
          required: true
          schema:
            $ref: "#/definitions/Answer"
      responses:
        201:
          description: Answer created. Returned ID of new answer.
          schema:
            type: integer
            format: int64
        400:
          description: Answer could not be created
    put:
      tags:
        - answer
      summary: Update answer
      operationId: updateAnswer
      parameters:
        - name: body
          in: body
          description: Answer object to update
          required: true
          schema:
            $ref: "#/definitions/Answer"
      responses:
        200:
          description: Answer updated
        404:
          description: Answer not found
  /answer/{answerId}:
    get:
      tags:
        - answer
      summary: Get answer by ID
      operationId: getAnswerById
      parameters:
        - name: answerId
          in: path
          description: ID of the answer to return
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Answer"
        404:
          description: answer not found
  /answer/rate:
    post:
      tags:
        - answer
      summary: Rate an answer
      operationId: rateAnswer
      parameters:
        - name: body
          in: body
          description: Rate description object
          required: true
          schema:
            $ref: "#/definitions/Rating"
      responses:
        200:
          description: Answer rated
        404:
          description: Answer not found
  /answer/forQuestionId/{questionId}:
    get:
      tags:
        - answer
      summary: Get all answers for question ID
      operationId: getAnswersForId
      parameters:
        - name: questionId
          in: path
          description: ID of the question to get answers for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Answer"
        404:
          description: Question not found for ID
definitions:
  Question:
    type: object
    required:
      - userName
      - title
    properties:
      id:
        type: integer
        format: int64
      userName:
        type: string
      title:
        type: string
      description:
        type: string
      numberOfAnswers:
        type: integer
        format: int32
  Answer:
    type: object
    required:
      - userName
      - title
      - questionId
    properties:
      id:
        type: integer
        format: int64
      questionId:
        type: integer
        format: int64
      userName:
        type: string
      title:
        type: string
      description:
        type: string
      rating:
        type: integer
        format: int32
  Rating:
    type: object
    required:
      - answerId
      - vote
    properties:
      answerId:
        type: integer
        format: int64
      vote:
        type: string
        enum:
          - UPVOTE
          - DOWNVOTE